File: mlbdatatools/__init__.py
=========================================
from . import mlbfetch
from . import mlbplot
from . import datatypes\n\n
File: mlbdatatools/mlbplot.py
=========================================
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import numpy as np
import pandas as pd

FIG_SIZE_X = 6
FIG_SIZE_Y = 6

def pitch_locations(df: pd.DataFrame | pd.Series, label_column='pitch_type'):
    """
    Plots a 2D scatter plot of pitch coordinates (px, pz) with different colors for each label.
    Includes a strike zone box, with equal axis scaling and y-axis minimum set to the floor of the data.

    Parameters:
        df (pd.DataFrame): DataFrame containing 'px', 'pz', and label_column columns.
        label_column (str): Column to use for labeling points (default is 'pitch_type').
    """
    if not {'px', 'pz'}.issubset(df.columns):
        raise ValueError("DataFrame must contain 'px' and 'pz' columns")
    
    if label_column not in df.columns:
        raise ValueError(f"DataFrame must contain the specified label column '{label_column}'")
    
    fig, ax = plt.subplots(figsize=(FIG_SIZE_X, FIG_SIZE_Y))
    
    # Create a scatter plot for each unique label
    unique_labels = df[label_column].unique()
    for label in unique_labels:
        subset = df[df[label_column] == label]
        ax.scatter(subset['px'], subset['pz'], label=label, alpha=0.7)
    
    # Define the strike zone (centered at px = 0, z range = [20/12, 43/12])
    strike_zone = Rectangle(
        (-0.83, 20/12),  # Bottom-left corner of the rectangle
        1.66,            # Width of the strike zone (Â±0.83 px from center)
        (43 - 20) / 12,  # Height of the strike zone
        edgecolor='red', facecolor='none', linewidth=2, linestyle='--'
    )
    ax.add_patch(strike_zone)  # Add the rectangle to the plot
    
    # Add labels, legend, and title
    ax.set_xlabel('Horizontal Coordinate (px)')
    ax.set_ylabel('Vertical Coordinate (pz)')
    ax.set_title(f'Pitch Locations by {label_column.capitalize()}')
    ax.legend(title=label_column.capitalize())
    ax.grid(True, linestyle='--', alpha=0.5)
    
    # Ensure equal scaling for both axes
    ax.set_aspect('equal', adjustable='datalim')
    plt.show()

def pitch_movements(df: pd.DataFrame | pd.Series, label_column='pitch_type'):
    """
    Plots a 2D scatter plot of pitch breaks (breakx and inducedbreakz) with different colors for each label.

    Parameters:
        df (pd.DataFrame): DataFrame containing 'breakx', 'inducedbreakz', and label_column columns.
        label_column (str): Column to use for labeling points (default is 'pitch_type').
    """
    if not {'breakx', 'inducedbreakz'}.issubset(df.columns):
        raise ValueError("DataFrame must contain 'breakx' and 'inducedbreakz' columns")
    
    if label_column not in df.columns:
        raise ValueError(f"DataFrame must contain the specified label column '{label_column}'")
    
    fig, ax = plt.subplots(figsize=(FIG_SIZE_X, FIG_SIZE_Y))
    
    # Create a scatter plot for each unique label
    unique_labels = df[label_column].unique()
    for label in unique_labels:
        subset = df[df[label_column] == label]
        ax.scatter(subset['breakx'], subset['inducedbreakz'], label=label, alpha=0.7)
    
    # Set axis limits to represent a 24-inch square space
    ax.set_xlim(-36, 36)
    ax.set_ylim(-36, 36)
    
    # Add labels, legend, and title
    ax.set_xlabel('Horizontal Break (breakx) [inches]')
    ax.set_ylabel('Vertical Break (inducedbreakz) [inches]')
    ax.set_title(f'Pitch Breaks by {label_column.capitalize()}')
    ax.legend(title=label_column.capitalize(), loc='upper left')
    ax.grid(True, linestyle='--', alpha=0.5)
    
    # Ensure equal aspect ratio
    ax.set_aspect('equal')
    
    plt.show()

def spray_chart(df: pd.DataFrame | pd.Series, label_column='events'):
    """
    Plots a spray chart of batted ball locations using `hc_x_ft` and `hc_y_ft` 
    from a pitch DataFrame. Includes curved foul lines extending 300 feet.

    Parameters:
        df (pd.DataFrame): DataFrame containing 'hc_x_ft', 'hc_y_ft', and label_column.
        label_column (str): Column to use for labeling points (default is 'events').
    """
    if not {'hc_x_ft', 'hc_y_ft'}.issubset(df.columns):
        raise ValueError("DataFrame must contain 'hc_x_ft' and 'hc_y_ft' columns")
    
    if label_column not in df.columns:
        raise ValueError(f"DataFrame must contain the specified label column '{label_column}'")

    df = df[df['hc_x_ft'].notna() & df['hc_y_ft'].notna()]
    
    fig, ax = plt.subplots(figsize=(FIG_SIZE_X, FIG_SIZE_Y))

    # Plot each batted ball location with labels
    unique_labels = df[label_column].unique()
    for label in unique_labels:
        subset = df[df[label_column] == label]
        ax.scatter(subset['hc_x_ft'], subset['hc_y_ft'], label=label, alpha=0.7)
    
    # Set labels and title
    ax.set_xlabel('Y from Home Plate (feet)')
    ax.set_ylabel('X Distance from Home Plate (feet)')
    ax.set_title(f'Spray Chart by {label_column.capitalize()}')
    ax.legend(title=label_column.capitalize(), loc='upper left')
    ax.grid(True, linestyle='--', alpha=0.5)
    
    # Set aspect ratio and orientation
    ax.set_aspect('equal')
    ax.set_xlim(-20, 350)
    ax.set_ylim(-20, 350)
    
    plt.show()
\n\n
File: mlbdatatools/datatypes.py
=========================================
from dataclasses import dataclass
from typing import List, TypeVar, Generic
from datetime import date
import pandas as pd

GenericEntry = TypeVar('GenericEntry', bound='Entry')

@dataclass
class Entry:
    def to_series(self) -> pd.Series:
        return pd.Series(self.__dict__)

class EntryList(List[GenericEntry], Generic[GenericEntry]):
    
    def to_df(self) -> pd.DataFrame:
        return pd.DataFrame([e.__dict__ for e in self])

@dataclass
class Player(Entry):
    id: int # mlb.com player id
    full_name: str
    first_name: str
    last_name: str
    primary_number: str
    birth_country: str
    height: str # ft' in"
    weight: int # lbs
    current_team_id: int # team mlbam id
    primary_position_code: str # 1 - 9, 10 (DH), O (OF), Y (TWP)
    primary_position_abbrev: str # P, C, 1B, 2B, 3B, SS, LF, CF, RF, DH, OF, TWP
    bat_side: str # L, R, or S
    pitch_hand: str # L or R

@dataclass
class Team(Entry):
    id: int # mlb.com player id
    name: str
    season: int # current season/most recent
    venue_id: int # mlb.com venue id
    venue_name: str
    team_code: str # mlb.com team code
    abbreviation: str
    team_name: str
    location_name: str
    league_id: int # 103/104 for mlb teams (AL/NL)
    league_name: str
    division_id: int
    division_name: str
    sport_id: int # 1: MLB
    sport_name: str
    parent_org_id: int | None # parent organizations mlb.com team id
    parent_org_name: str | None

@dataclass
class Venue(Entry):
    id: int # mlb.com venue id
    name: str
    turf_type: str | None # Grass, Artificial Turf, etc...
    roof_type: str | None # Open, Rectractable
    left_line: int | None # not na for mlb venues
    left: int | None # can be na for mlb venues
    left_center: int | None # not na for mlb venues
    center: int | None # not na for mlb venues
    right_center: int | None # not na for mlb venues
    right: int | None # can be na for mlb venues
    right_line: int | None # not na for mlb venues
    azimuth_ange: int | None
    elevation: int | None

@dataclass
class Game(Entry):
    id: int # mlb.com game id
    type: str # R (Regular season), currently only regular season
    doubleheader: str
    season: int
    game_date: date
    game_time: str
    status_code: str
    home_team_id: int
    away_team_id: int
    home_team_name: str
    away_team_name: str
    venue_id: int
    venue_name: str
    weather_condition: str
    weather_temp: str
    weather_wind: str
    home_team_pitcher_id: int
    home_team_pitcher_name: str
    away_team_pitcher_id: int
    away_team_pitcher_name: str

@dataclass
class DefensePlay(Entry):
    fielder_id: str # mlb.com player id
    fielder_name: str
    fielder_team_id: str # mlb.com team id
    fielder_position: int
    year: str # plays are only known under mm/yy. No mapping to game, pitch, etc...
    month: str
    est_success: float # statcast est success rate
    outs_above_avg: float # statcast outs above average for fielder
    runs_prevented: float # statcast runs prevented for fielder
    is_out: bool

@dataclass
class Pitch(Entry):
    id: str
    inning: int
    ab_number: int
    batter: int
    stand: str
    pitcher: int
    p_throws: str
    team_batting_id: int
    team_fielding_id: int
    result: str
    events: str
    strikes: int
    balls: int
    outs: int
    pitch_type: str
    call: str
    pitch_call: str
    start_speed: float | None
    extension: float | None
    zone: int | None
    spin_rate: float | None
    x0: float | None
    z0: float | None
    breakx: float | None
    breakz: float | None
    inducedbreakz: float | None
    hit_speed: float | None
    hit_angle: float | None
    pitch_number: int
    gameid: int
    px: float | None
    pz: float | None
    y0: float | None
    ax: float | None
    ay: float | None
    az: float | None
    vx0: float | None
    vy0: float | None
    vz0: float | None
    hc_x_ft: float | None
    hc_y_ft: float | None
    runner_on_1b: bool
    runner_on_2b: bool
    runner_on_3b: bool
    runner_batter_score: bool
    runner_1b_score: bool
    runner_2b_score: bool
    runner_3b_score: bool

@dataclass
class BatterBoxscore(Entry):
    id: str
    playerid: int
    gameid: int
    flyouts: int
    groundouts: int
    runs: int
    homeruns: int
    strikeouts: int
    baseonballs: int
    hits: int
    atbats: int
    caughtstealing: int
    stolenbases: int
    plateappearances: int
    rbi: int
    doubles: int
    triples: int
    hitbypitch: int

@dataclass
class PitcherBoxscore(Entry):
    id: str
    playerid: int
    gameid: int
    groundouts: int
    airouts: int
    runs: int
    strikeouts: int
    baseonballs: int
    hits: int
    hitbypitch: int
    atbats: int
    numberofpitches: int
    inningspitched: float
    wins: int
    losses: int
    earnedruns: int
    battersfaced: int
    outs: int
    balls: int
    strikes: int

@dataclass
class GamefeedResponse():
    game: Game
    pitches: EntryList[Pitch]
    batter_boxscores: EntryList[BatterBoxscore]
    pitcher_boxscores: EntryList[PitcherBoxscore]

@dataclass
class GamefeedsResponse:
    games: EntryList[Game]
    pitches: EntryList[Pitch]
    batter_boxscores: EntryList[BatterBoxscore]
    pitcher_boxscores: EntryList[PitcherBoxscore]

@dataclass
class SavantBatterSeason(Entry):
    # Fields with percentile counterparts
    barrel_batted_rate: float  # Barrels per plate appearance
    pct_rank_barrel_batted_rate: float  # Percentile for barrel rate
    xba: float  # Expected batting average
    pct_rank_xba: float  # Percentile for xBA
    hard_hit_rate: float  # Hard-hit rate (percentage)
    pct_rank_hard_hit_rate: float  # Percentile for hard-hit rate
    exit_velocity_avg: float  # Average exit velocity
    pct_rank_exit_velocity_avg: float  # Percentile for average exit velocity
    launch_angle_avg: float  # Average launch angle
    pct_rank_launch_angle_avg: float  # Percentile for average launch angle
    woba: float  # Weighted on-base average
    pct_rank_woba: float  # Percentile for wOBA
    xwoba: float  # Expected weighted on-base average
    pct_rank_xwoba: float  # Percentile for xwOBA
    sweet_spot_percent: float  # Sweet spot percentage
    pct_rank_sweet_spot_percent: float  # Percentile for sweet spot percentage
    groundballs_percent: float  # Groundballs percentage
    pct_rank_groundballs_percent: float  # Percentile for groundballs percentage
    babip: float  # Batting average on balls in play
    pct_rank_babip: float  # Percentile for BABIP
    obp: float  # On-base percentage
    pct_rank_obp: float  # Percentile for OBP
    slg: float  # Slugging percentage
    pct_rank_slg: float  # Percentile for SLG
    iso: float  # Isolated power
    pct_rank_iso: float  # Percentile for ISO
    bacon: float  # Batting average on contact
    pct_rank_bacon: float  # Percentile for BACON
    xbacon: float  # Expected batting average on contact
    pct_rank_xbacon: float  # Percentile for XBACON
    xslg: float  # Expected slugging percentage
    pct_rank_xslg: float  # Percentile for XSLG
    xiso: float  # Expected isolated power
    pct_rank_xiso: float  # Percentile for XISO
    avg_hyper_speed: float  # Average hyper speed
    pct_rank_avg_hyper_speed: float  # Percentile for average hyper speed
    avg_best_speed: float  # Average best speed
    pct_rank_avg_best_speed: float  # Percentile for average best speed

@dataclass
class SavantBatterPage:
    batter_id: int
    savant_seasons: EntryList[SavantBatterSeason]
\n\n
File: mlbdatatools/utils.py
=========================================
import requests
import json
import re
from bs4 import BeautifulSoup


def get_request_json(url: str, params: dict | None = None):
    # extract json from url
    if params != None:
        r = requests.get(url, params=params)
    else:
        r = requests.get(url)
    return r.json()

def get_request_text(url: str, params: dict | None = None):
    # extract a javascript variable from the html
    if params != None:
        r = requests.get(url, params=params)
    else:
        r = requests.get(url)
    text = r.text
    return text\n\n
File: mlbdatatools/mlbfetch.py
=========================================
from datatypes import (
    EntryList, Game, Player, Team, Venue, DefensePlay, Pitch,
    BatterBoxscore, PitcherBoxscore, GamefeedResponse, GamefeedsResponse,
    SavantBatterPage, SavantBatterSeason
)
from utils import get_request_json, get_request_text
import json

def players(sport_id: int = 1, season: int = 2024) -> EntryList[Player]:
    """
    Fetches a list of players for a specific sport and season.

    Parameters:
        sport_id (int): The ID of the sport to fetch players for. Default is 1 (MLB).
        season (int): The year of the season to fetch player data for. Default is 2024.

    Returns:
        EntryList[Player]: A list of Player objects.
    """
    players_url = f"https://statsapi.mlb.com/api/v1/sports/{sport_id}/players"
    params = {
        'season': str(season),
    }
    players_raw = get_request_json(players_url, params).get('people')
    players_clean = EntryList(Player(
        id=p.get('id'),
        full_name=p.get('fullName'),
        first_name=p.get('firstName'),
        last_name=p.get('lastName'),
        primary_number=p.get('primaryNumber'),
        birth_country=p.get('birthCountry'),
        height=p.get('height'),
        weight=p.get('weight'),
        current_team_id=p.get('currentTeam').get('id'),
        primary_position_code=p.get('primaryPosition').get('code'),
        primary_position_abbrev=p.get('primaryPosition').get('abbreviation'),
        bat_side=p.get('batSide').get('code'),
        pitch_hand=p.get('pitchHand').get('code'),
    ) for p in players_raw)
    return players_clean

def teams() -> EntryList[Team]:
    """
    Fetches a list of teams for the MLB.

    This function retrieves detailed team information such as name, season, 
    venue, and league affiliation from the MLB Stats API.

    Returns:
        EntryList[Team]: A list of Team objects.
    """
    teams_url = "https://statsapi.mlb.com/api/v1/teams?season=2024"
    teams_raw = get_request_json(teams_url).get('teams')
    teams_clean = EntryList(Team(
        id=t.get('id'),
        name=t.get('name'),
        season=t.get('season'),
        venue_id=t.get('venue', {}).get('id'),
        venue_name=t.get('venue', {}).get('name'),
        team_code=t.get('teamCode'),
        abbreviation=t.get('abbreviation'),
        team_name=t.get('teamName'),
        location_name=t.get('locationName'),
        league_id=t.get('league', {}).get('id'),
        league_name=t.get('league', {}).get('name'),
        division_id=t.get('division', {}).get('id'),
        division_name=t.get('division', {}).get('name'),
        sport_id=t.get('sport', {}).get('id'),
        sport_name=t.get('sport', {}).get('name'),
        parent_org_id=t.get('parentOrgId'),
        parent_org_name=t.get('parentOrgName')
    ) for t in teams_raw)
    return teams_clean

def venues() -> EntryList[Venue]:
    """
    Fetches a list of MLB venues with detailed field and location information.

    This function retrieves information such as venue name, turf type, roof type, 
    field dimensions, and location attributes from the MLB Stats API.

    Returns:
        EntryList[Venue]: A list of Venue objects.
    """
    venues_url = "https://ws.statsapi.mlb.com/api/v1/venues?hydrate=fieldInfo,location"
    venues_raw = get_request_json(venues_url).get("venues", [])
    venues_clean = EntryList(
        Venue(
            id=v.get('id'),
            name=v.get('name'),
            turf_type=v.get('fieldInfo', {}).get('turfType'),
            roof_type=v.get('fieldInfo', {}).get('roofType'),
            left_line=v.get('fieldInfo', {}).get('leftLine'),
            left=v.get('fieldInfo', {}).get('left'),
            left_center=v.get('fieldInfo', {}).get('leftCenter'),
            center=v.get('fieldInfo', {}).get('center'),
            right_center=v.get('fieldInfo', {}).get('rightCenter'),
            right=v.get('fieldInfo', {}).get('right'),
            right_line=v.get('fieldInfo', {}).get('rightLine'),
            azimuth_ange=v.get('location', {}).get('azimuthAngle'),
            elevation=v.get('location', {}).get('elevation'),
        ) for v in venues_raw
    )
    return venues_clean

def defense_plays(entity_id: int, start_year: int, end_year: int | None) -> EntryList[DefensePlay]:
    """
    Fetches defensive plays data for a specified player over a given time range.

    Parameters:
        entity_id (int): The MLB.com ID of the player (fielder).
        start_year (int): The starting year of the range to fetch data for.
        end_year (int | None): The ending year of the range to fetch data for. If None, defaults to start_year.

    Returns:
        EntryList[DefensePlay]: A list of DefensePlay objects.
    """
    if end_year == None:
        end_year = start_year
    plays_url = "https://baseballsavant.mlb.com/visuals/oaa-data"
    params = {
        'type': 'Fielder',
        'playerId': entity_id,
        'startYear': start_year,
        'endYear': end_year
    }
    plays_raw = get_request_json(plays_url, params)
    plays_clean = EntryList(
        DefensePlay(
            fielder_id=p.get("target_mlb_id"),
            fielder_name=p.get("name_fielder"),
            fielder_team_id=p.get("fld_team_id"),
            fielder_position=p.get("target_id"),
            year=p.get("year"),
            month=p.get("api_game_date_month_mm"),
            est_success=p.get("adj_estimated_success_rate"),
            outs_above_avg=p.get("outs_above_average"),
            runs_prevented=p.get("fielding_runs_prevented"),
            is_out=p.get("is_hit_into_play_field_out")=="1"
        ) for p in plays_raw
    )
    return plays_clean

def gamefeed(game_id: int) -> GamefeedResponse:
    """
    Fetches detailed game feed data for a specific MLB game.

    This function retrieves game metadata, pitch-by-pitch details, and 
    box score information for batters and pitchers.

    Parameters:
        game_id (int): The MLB.com ID of the game to fetch data for.

    Returns:
        GamefeedResponse: An object containing:
            - game (Game): Metadata about the game, such as teams, venue, and weather.
            - pitches (EntryList[Pitch]): Detailed data for each pitch in the game.
            - batter_boxscores (EntryList[BatterBoxscore]): Box score data for all batters.
            - pitcher_boxscores (EntryList[PitcherBoxscore]): Box score data for all pitchers.
    """
    gamefeed_url = f"https://statsapi.mlb.com/api/v1.1/game/{game_id}/feed/live"
    data = get_request_json(gamefeed_url)
    game_data = data.get("gameData", {})
    game_data_clean = Game(
        id=game_data.get("game", {}).get("pk"),
        type=game_data.get("game", {}).get("type"),
        doubleheader=game_data.get("game", {}).get("doubleheader"),
        season=game_data.get("game", {}).get("season"),
        game_date=game_data.get("datetime", {}).get("officialDate"),
        game_time=game_data.get("datetime", {}).get("time"),
        status_code=game_data.get("status", {}).get("statusCode"),
        home_team_id=game_data.get("teams", {}).get("home", {}).get("id"),
        away_team_id=game_data.get("teams", {}).get("away", {}).get("id"),
        home_team_name=game_data.get("teams", {}).get("home", {}).get("name"),
        away_team_name=game_data.get("teams", {}).get("away", {}).get("name"),
        venue_id=game_data.get("venue", {}).get("id"),
        venue_name=game_data.get("venue", {}).get("name"),
        weather_condition=game_data.get("weather", {}).get("condition"),
        weather_temp=game_data.get("weather", {}).get("temp"),
        weather_wind=game_data.get("weather", {}).get("wind"),
        home_team_pitcher_id=game_data.get("probablePitchers", {}).get("home", {}).get("id"),
        home_team_pitcher_name=game_data.get("probablePitchers", {}).get("home", {}).get("fullName"),
        away_team_pitcher_id=game_data.get("probablePitchers", {}).get("away", {}).get("id"),
        away_team_pitcher_name=game_data.get("probablePitchers", {}).get("away", {}).get("fullName")
    )
    all_plays = data.get("liveData", {}).get("plays", {}).get("allPlays", [])
    pitches = [{'play_data': play, 'pitch_data': pitch} for play in all_plays for pitch in play.get("playEvents", []) if pitch.get('isPitch', False)]
    clean_pitches: EntryList[Pitch] = EntryList()
    for p in pitches:
        play_data = p.get('play_data', {})
        pitch_data = p.get('pitch_data', {})
        home_away_batting = "home" if play_data.get("about", {}).get("halfInning") == "top" else "away"
        home_away_fielding = "away" if home_away_batting == "home" else "home"
        runners = play_data.get("runners", [])
        runner_batter = [runner for runner in runners if runner.get("movement", {}).get("originBase") == None]
        runner_on_1b = [runner for runner in runners if runner.get("movement", {}).get("originBase") == '1B']
        runner_on_2b = [runner for runner in runners if runner.get("movement", {}).get("originBase") == '2B']
        runner_on_3b = [runner for runner in runners if runner.get("movement", {}).get("originBase") == '3B']
        is_runner_on_1b = len(runner_on_1b) > 0
        is_runner_on_2b = len(runner_on_2b) > 0
        is_runner_on_3b = len(runner_on_3b) > 0
        runner_batter_score = runner_batter[0].get("movement", {}).get("end") == "score"  if len(runner_batter) > 0 else False
        runner_1b_score = runner_on_1b[0].get("movement", {}).get("end") == "score" if is_runner_on_1b else False
        runner_2b_score = runner_on_2b[0].get("movement", {}).get("end") == "score" if is_runner_on_2b else False
        runner_3b_score = runner_on_3b[0].get("movement", {}).get("end") == "score" if is_runner_on_3b else False
        clean_pitches.append(Pitch(**{
            "id": pitch_data.get("playId"),
            "inning": play_data.get("about", {}).get("inning"),
            "ab_number": play_data.get("atBatIndex"),
            "batter": play_data.get("matchup", {}).get("batter", {}).get("id"),
            "stand": play_data.get("matchup", {}).get("batSide", {}).get("code"),
            "pitcher": play_data.get("matchup", {}).get("pitcher", {}).get("id"),
            "p_throws": play_data.get("matchup", {}).get("pitchHand", {}).get("code"),
            "team_batting_id": game_data_clean.home_team_id if home_away_batting == "home" else game_data_clean.away_team_id,
            "team_fielding_id": game_data_clean.home_team_id if home_away_fielding == "home" else game_data_clean.away_team_id,
            "result": play_data.get("result", {}).get("event"),
            "events": play_data.get("result", {}).get("event"),
            "strikes": pitch_data.get("count", {}).get("strikes"),
            "balls": pitch_data.get("count", {}).get("balls"),
            "outs": pitch_data.get("count", {}).get("outs"),
            "pitch_type": pitch_data.get("details", {}).get("type", {}).get("code"),
            "call": pitch_data.get("details", {}).get("call", {}).get("description"),
            "pitch_call": pitch_data.get("details", {}).get("call", {}).get("description"),
            "start_speed": pitch_data.get("pitchData", {}).get("startSpeed"),
            "extension": pitch_data.get("pitchData", {}).get("extension"),
            "zone": pitch_data.get("pitchData", {}).get("zone"),
            "spin_rate": pitch_data.get("pitchData", {}).get("breaks", {}).get("spinRate"),
            "x0": pitch_data.get("pitchData", {}).get("coordinates", {}).get("x0"),
            "z0": pitch_data.get("pitchData", {}).get("coordinates", {}).get("z0"),
            "breakx": pitch_data.get("pitchData", {}).get("breaks", {}).get("breakHorizontal"),
            "breakz": pitch_data.get("pitchData", {}).get("breaks", {}).get("breakVertical"),
            "inducedbreakz": pitch_data.get("pitchData", {}).get("breaks", {}).get("breakVerticalInduced"),
            "hit_speed": pitch_data.get("hitData", {}).get("launchSpeed"),
            "hit_angle": pitch_data.get("hitData", {}).get("launchAngle"),
            "pitch_number": pitch_data.get("pitchNumber"),
            "gameid": game_id,
            "px": pitch_data.get("pitchData", {}).get("coordinates", {}).get("pX"),
            "pz": pitch_data.get("pitchData", {}).get("coordinates", {}).get("pZ"),
            "y0": pitch_data.get("pitchData", {}).get("coordinates", {}).get("y0"),
            "ax": pitch_data.get("pitchData", {}).get("coordinates", {}).get("aX"),
            "ay": pitch_data.get("pitchData", {}).get("coordinates", {}).get("aY"),
            "az": pitch_data.get("pitchData", {}).get("coordinates", {}).get("aZ"),
            "vx0": pitch_data.get("pitchData", {}).get("coordinates", {}).get("vX0"),
            "vy0": pitch_data.get("pitchData", {}).get("coordinates", {}).get("vY0"),
            "vz0": pitch_data.get("pitchData", {}).get("coordinates", {}).get("vZ0"),
            "hc_x_ft": pitch_data.get("hitData", {}).get("coordinates", {}).get("coordX"),
            "hc_y_ft": pitch_data.get("hitData", {}).get("coordinates", {}).get("coordY"),
            "runner_on_1b": is_runner_on_1b,
            "runner_on_2b": is_runner_on_2b,
            "runner_on_3b": is_runner_on_3b,
            "runner_batter_score": runner_batter_score,
            "runner_1b_score": runner_1b_score,
            "runner_2b_score": runner_2b_score,
            "runner_3b_score": runner_3b_score,
        }))
    
    # Create boxscore lists
    batter_boxscores: EntryList[BatterBoxscore] = EntryList()
    pitcher_boxscores: EntryList[PitcherBoxscore] = EntryList()
    away_boxscores = list(data.get("liveData", {}).get("boxscore", {}).get("teams", {}).get("away", {}).get("players", {}).values())
    home_boxscores = list(data.get("liveData", {}).get("boxscore", {}).get("teams", {}).get("home", {}).get("players", {}).values())
    boxscores_raw = away_boxscores + home_boxscores
    for boxscore in boxscores_raw:
        batting_boxscore = boxscore.get("stats", {}).get("batting")
        if batting_boxscore:
            boxscore_id = str(game_id) + str(boxscore["person"]["id"])
            batter_boxscores.append(BatterBoxscore(
                id=boxscore_id,
                playerid=boxscore.get("person", {}).get("id"),
                gameid=game_id,
                flyouts=batting_boxscore.get("flyOuts"),
                groundouts=batting_boxscore.get("groundOuts"),
                runs=batting_boxscore.get("runs"),
                homeruns=batting_boxscore.get("homeRuns"),
                strikeouts=batting_boxscore.get("strikeOuts"),
                baseonballs=batting_boxscore.get("baseOnBalls"),
                hits=batting_boxscore.get("hits"),
                atbats=batting_boxscore.get("atBats"),
                caughtstealing=batting_boxscore.get("caughtStealing"),
                stolenbases=batting_boxscore.get("stolenBases"),
                plateappearances=batting_boxscore.get("plateAppearances"),
                rbi=batting_boxscore.get("rbi"),
                doubles=batting_boxscore.get("doubles"),
                triples=batting_boxscore.get("triples"),
                hitbypitch=batting_boxscore.get("hitByPitch"),
            ))
        pitching_boxscore = boxscore.get("stats", {}).get("pitching")
        if pitching_boxscore:
            boxscore_id = str(game_id) + str(boxscore["person"]["id"])
            pitcher_boxscores.append(PitcherBoxscore(
                id=boxscore_id,
                playerid=boxscore.get("person", {}).get("id"),
                gameid=game_id,
                groundouts=pitching_boxscore.get("groundOuts"),
                airouts=pitching_boxscore.get("airOuts"),
                runs=pitching_boxscore.get("runs"),
                strikeouts=pitching_boxscore.get("strikeOuts"),
                baseonballs=pitching_boxscore.get("baseOnBalls"),
                hits=pitching_boxscore.get("hits"),
                hitbypitch=pitching_boxscore.get("hitByPitch"),
                atbats=pitching_boxscore.get("atBats"),
                numberofpitches=pitching_boxscore.get("numberOfPitches"),
                inningspitched=pitching_boxscore.get("inningsPitched"),
                wins=pitching_boxscore.get("wins"),
                losses=pitching_boxscore.get("losses"),
                earnedruns=pitching_boxscore.get("earnedRuns"),
                battersfaced=pitching_boxscore.get("battersFaced"),
                outs=pitching_boxscore.get("outs"),
                balls=pitching_boxscore.get("balls"),
                strikes=pitching_boxscore.get("strikes"),
            ))

    return GamefeedResponse(
        game=game_data_clean,
        pitches=clean_pitches,
        batter_boxscores=batter_boxscores,
        pitcher_boxscores=pitcher_boxscores
    )

def gamefeeds(game_ids: list[int]) -> GamefeedsResponse:
    """
    Fetches game feed data for multiple MLB games.

    This function retrieves metadata, pitch-by-pitch details, and box score 
    information for a list of specified games.

    Parameters:
        game_ids (list[int]): A list of MLB.com game IDs to fetch data for.

    Returns:
        GamefeedsResponse: An object containing aggregated data for all requested games:
            - games (EntryList[Game]): Metadata for all games.
            - pitches (EntryList[Pitch]): Combined pitch data for all games.
            - batter_boxscores (EntryList[BatterBoxscore]): Box score data for all batters.
            - pitcher_boxscores (EntryList[PitcherBoxscore]): Box score data for all pitchers.
    """
    responses: list[GamefeedResponse] = []
    for g_id in game_ids:
        responses.append(gamefeed(g_id))
    games: EntryList[Game] = EntryList()
    pitches: EntryList[Pitch] = EntryList()
    batter_boxscores: EntryList[BatterBoxscore] = EntryList()
    pitcher_boxscores: EntryList[PitcherBoxscore] = EntryList()
    for r in responses:
        games.append(r.game)
        pitches += r.pitches
        batter_boxscores += r.batter_boxscores
        pitcher_boxscores += r.pitcher_boxscores
    return GamefeedsResponse(
        games=games,
        pitches=pitches,
        batter_boxscores=batter_boxscores,
        pitcher_boxscores=pitcher_boxscores
    )

def schedule(start_date: str, end_date:str | None = None, sport_id: int = 1) -> EntryList[Game]:
    """
    Fetches the MLB game schedule for a specified date range.

    This function retrieves detailed information about scheduled games, 
    including participating teams, probable pitchers, venue, and weather conditions.

    Parameters:
        start_date (str): The starting date for the schedule (format: YYYY-MM-DD).
        end_date (str | None): The ending date for the schedule. If None, defaults to start_date.

    Returns:
        EntryList[Game]: A list of Game objects containing metadata about the scheduled games.
    """
    schedule_url = f"https://statsapi.mlb.com/api/v1/schedule"
    params = {
        'sportId': sport_id,
        'gameType': 'R',
        'startDate': start_date,
        'endDate': end_date if end_date else start_date,
        'hydrate': 'team,probablePitcher,lineups,weather,scoringplays'
    }
    data = get_request_json(schedule_url, params)
    clean_games: EntryList[Game] = EntryList()
    for date in data.get('dates', []):
        for g in date.get('games', []):
            game_data_clean = Game(
                id=g.get('gamePk'),
                type=g.get('gameType'),
                doubleheader=g.get('doubleHeader'),
                season=g.get('seasonDisplay'),
                game_date=g.get('officialDate'),
                game_time=g.get('gameDate', '').split('T')[1],
                status_code=g.get('status', {}).get('statusCode'),
                home_team_id=g.get('teams', {}).get('home', {}).get("team", {}).get("id"),
                away_team_id=g.get('teams', {}).get('away', {}).get("team", {}).get("id"),
                home_team_name=g.get('teams', {}).get("home", {}).get("team", {}).get("name"),
                away_team_name=g.get('teams', {}).get("away", {}).get("team", {}).get("name"),
                venue_id=g.get('venue', {}).get("id"),
                venue_name=g.get('venue', {}).get("name"),
                weather_condition=g.get('weather', {}).get("condition"),
                weather_temp=g.get('weather', {}).get("temp"),
                weather_wind=g.get('weather', {}).get('wind'),
                home_team_pitcher_id=g.get('teams', {}).get('home', {}).get('probablePitcher', {}).get('id'),
                home_team_pitcher_name=g.get('teams', {}).get('home', {}).get('probablePitcher', {}).get('fullName'),
                away_team_pitcher_id=g.get('teams', {}).get('away', {}).get('probablePitcher', {}).get('id'),
                away_team_pitcher_name=g.get('teams', {}).get('away', {}).get('probablePitcher', {}).get('fullName'),
            )
            clean_games.append(game_data_clean)
    return clean_games

def savant_batter_page(player_id: int) -> SavantBatterPage:
    url = f"https://baseballsavant.mlb.com/savant-player/{player_id}?stats=statcast-r-hitting-mlb"
    data = get_request_text(url)
    serverValsText = data.split('var serverVals = ')[1].split(';')[0]
    seasons = EntryList[SavantBatterSeason]()
    for line in serverValsText.split('\n'):
        if 'statcast: ' in line:
            line_data = line.split('statcast: ')[1][:-1]
            statcast_seasons_raw = json.loads(line_data) 
            for season_data in statcast_seasons_raw:
                if season_data['year'] is None:
                    continue
                savant_season = SavantBatterSeason(
                    # Existing fields with percentiles
                    barrel_batted_rate=float(season_data['barrel_batted_rate']),
                    pct_rank_barrel_batted_rate=float(season_data["percent_rank_barrel_batted_rate_unrounded"]),
                    xba=float(season_data["xba"]),
                    pct_rank_xba=float(season_data["percent_rank_xba_unrounded"]),
                    hard_hit_rate=float(season_data["hard_hit_percent"]),
                    pct_rank_hard_hit_rate=float(season_data["percent_rank_hard_hit_percent_unrounded"]),
                    exit_velocity_avg=float(season_data["exit_velocity_avg"]),
                    pct_rank_exit_velocity_avg=float(season_data["percent_rank_exit_velocity_avg_unrounded"]),
                    launch_angle_avg=float(season_data["launch_angle_avg"]),
                    pct_rank_launch_angle_avg=float(season_data["percent_rank_launch_angle_avg_unrounded"]),
                    woba=float(season_data["woba"]),
                    pct_rank_woba=float(season_data["percent_rank_woba_unrounded"]),
                    xwoba=float(season_data["xwoba"]),
                    pct_rank_xwoba=float(season_data["percent_rank_xwoba_unrounded"]),
                    sweet_spot_percent=float(season_data["sweet_spot_percent"]),
                    pct_rank_sweet_spot_percent=float(season_data["percent_rank_sweet_spot_percent_unrounded"]),
                    groundballs_percent=float(season_data["groundballs_percent"]),
                    pct_rank_groundballs_percent=float(season_data["percent_rank_groundballs_percent_unrounded"]),
                    babip=float(season_data["babip"]),
                    pct_rank_babip=float(season_data["percent_rank_babip_unrounded"]),
                    obp=float(season_data["obp"]),
                    pct_rank_obp=float(season_data["percent_rank_obp_unrounded"]),
                    slg=float(season_data["slg"]),
                    pct_rank_slg=float(season_data["percent_rank_slg_unrounded"]),
                    iso=float(season_data["iso"]),
                    pct_rank_iso=float(season_data["percent_rank_iso_unrounded"]),
                    bacon=float(season_data["bacon"]),
                    pct_rank_bacon=float(season_data["percent_rank_bacon_unrounded"]),
                    xbacon=float(season_data["xbacon"]),
                    pct_rank_xbacon=float(season_data["percent_rank_xbacon_unrounded"]),
                    xslg=float(season_data["xslg"]),
                    pct_rank_xslg=float(season_data["percent_rank_xslg_unrounded"]),
                    xiso=float(season_data["xiso"]),
                    pct_rank_xiso=float(season_data["percent_rank_xiso_unrounded"]),
                    avg_hyper_speed=float(season_data["avg_hyper_speed"]),
                    pct_rank_avg_hyper_speed=float(season_data["percent_rank_avg_hyper_speed_unrounded"]),
                    avg_best_speed=float(season_data["avg_best_speed"]),
                    pct_rank_avg_best_speed=float(season_data["percent_rank_avg_best_speed_unrounded"]),
                )

                # Append to the list of seasons
                seasons.append(savant_season)
    return SavantBatterPage(
        player_id,
        savant_seasons=seasons
    )\n\n
